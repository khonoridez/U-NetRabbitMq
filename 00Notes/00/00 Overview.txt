+++ Solution Folders

1. Domain
2. Infra.Bus
3. Infra.IoC
4. Microservices
5. Presentation

+++ Api Call Flow

Ensure RabbitMq service is running
http://localhost:15672/
test / test
guest / guest

ex. Banking Api
1. Trigger Api
Microservices/Banking/Api/MicroRabbit.Banking.Api
/Controllers/BankingController.cs

> _accountService.Transfer(accountTransfer);

2. triggers Transfer method in AccountService passing through RabbitMq SendCommand
Microservices/Banking/MicroRabbit.Banking.Application
/Services/AccountService.cs

> var createTransferCommand = new CreateTransferCommand(
                accountTransfer.FromAccount,
                accountTransfer.ToAccount,
                accountTransfer.TransferAmount);
> _bus.SendCommand(createTransferCommand);

2.1 RabbitMQBus
public Task SendCommand<T>(T command) where T : Command
{
    return _mediator.Send(command);
}

2.2 Under Infra.IoC
Infra.IoC/MicroRabbit.Infra.IoC/DependencyContainer.cs
- IEventBus will implement RabbitMQBus
- IRequestHandler<CreateTransferCommand, bool> will implement TransferCommandHandler
- IRequestHandler from MediatR
> services.AddTransient<IEventBus, RabbitMQBus>();
> services.AddTransient<IRequestHandler<CreateTransferCommand, bool>, TransferCommandHandler>();

3. TransferCommandHandler.cs
- Microservices/Banking/Domain/MicroRabbit.Banking.Domain
- /CommandHandlers/TransferCommandHandler.cs
- Gets trigger based on SendCommand type of T (MediatR)
...
public Task<bool> Handle(CreateTransferCommand request, CancellationToken cancellationToken)
{
    _bus.Publish(new TransferCreatedEvent(
        request.From,
        request.To,
        request.Amount
        ));

    return Task.FromResult(true);
}

4. Triggers Publish method of concrete class of IEventBus which is RabbitMQBus
- Domain/MicroRabbit.Domain.Core/Bus/IEventBus.cs
- Infra.Bus/MicroRabbit.Infra.Bus/RabbitMQBus.cs
- Sends message to RabbitMq

public void Publish<T>(T @event) where T : Event
{
    var factory = new ConnectionFactory { HostName = "localhost" };
    using (var connection = factory.CreateConnection())
    using (var channel = connection.CreateModel())
    {
        var eventName = @event.GetType().Name;

        channel.QueueDeclare(eventName, false, false, false, null);

        var message = JsonConvert.SerializeObject(@event);
        var body = Encoding.UTF8.GetBytes(message);

        channel.BasicPublish("", eventName, null, body);
    }
}

++ Sending and Consuming(Subscribe) Flow

Message Sender (Banking Api) --> RabbitMq Server --> Message Receiver (Transfer Api)

++ Set Breakpoints

1. Infra.Bus/MicroRabbit.Infra.Bus/RabbitMQBus.cs
- Publish
- SendCommand
- Subscribe
- StartBasicConsume
- Consumer_Received
- ProcessEvent

2. Microservices/Transfer/Domain/MicroRabbit.Transfer.Domain/EventHandlers/TransferEventHandler.cs
- Handle

! Check if this Handle is being Invoked in RabbitMq 
- (As per generic ProcessEvent method in RabbitMQBus.cs)
// await (Task)concreteType.GetMethod("Handle").Invoke(handler, new object[] { @event });

3. Microservices/Banking/Api/MicroRabbit.Banking.Api/Controllers/BankingController.cs
- Post

! Perform an Account Transfer

4. Microservices/Banking/Application/MicroRabbit.Banking.Application/Services/AccountService.cs
- Transfer

! Account Service will initiate a _bus.SendCommand

5. Microservices/Transfer/Domain/MicroRabbit.Banking.Domain/CommandHandlers/TransferCommandHandler.cs
- Handle

! We do a publish and drop the message to RabbitMq

++ Test 
1. Clear Queue in RabbitMq interface (Queues Tab)
http://localhost:15672/

++ Publish to RabbitMq
- Set Banking Service as Startup, Run
- Post sample data:
{
  "fromAccount": 1,
  "toAccount": 2,
  "transferAmount": 10.50
}
- Trace via breakpoints:

1. BankingController
- Post
2. AccountService
- Transfer
3. RabbitMQBus
- SendCommand
4. TransferCommandHandler
- Handle
5. RabbitMQBus
- Publish
6. Verify "TransferCreatedEvent" queue in RabbitMq has a pending message


++ Consume (via Subscribe) Queue from RabbitMq:

- Run Transfer Api (Right click > debug > Start new instance)
- Trace via breakpoints:

1. RabbitMQBus
- Subscribe
// this is because in Startup.cs we configured to Subscribe in a type of Event (TransferCreatedEvent)
2. RabbitMQBus
- StartBasicConsume
// var consumer = new AsyncEventingBasicConsumer(channel);
// consumer.Received += Consumer_Received;
// Listens for all type of that Event

3. Finishes Scubscribe in Startup.cs

3. RabbitMQBus
- Consumer_Received

4. RabbitMQBus
- ProcessEvent
// await (Task)concreteType.GetMethod("Handle").Invoke(handler, new object[] { @event });
// Invokes the Handle method

5. TransferEventHandler (Transfer Microservice)
- Handle

public Task Handle(TransferCreatedEvent @event)
{
    // We can do additional things here
    // e.g. Calculations, do actual Transfer, Talk with other Api/Service
    return Task.CompletedTask;
}

6. Verify "TransferCreatedEvent" queue's message is consumed in RabbitMq
